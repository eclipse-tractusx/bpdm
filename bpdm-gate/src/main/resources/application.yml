################################################################################
# Copyright (c) 2021,2024 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
################################################################################

# BPDM application specific configuration
bpdm:
  # Name of this application (shown in Swagger) (on default set by maven resource filtering)
  name: '@project.name@'
  # Version of this application (shown in Swagger) (on default set by maven resource filtering)
  version: '@project.version@'
  # Description of this application (shown in Swagger) (on default set by maven resource filtering)
  description: '@project.description@'
  # The url from which this API is reachable
  # Will appear as server item in the OpenAPI document
  # Will also be used by Swagger as base-url to perform requests against
  # If empty Swagger will generate the OpenAPI server url when accessing the Swagger page
  url:
  bpn:
    # Specify the BPNL of the owner of this Gate here
    # If set, the BPNL will be attached to business partner data a sharing member claim as their own
    # This way the golden record process knows who claims the business partner
    # Additionally, if set and security is enabled all incoming tokens need to have a "BPN" claim with the matching BPNL or otherwise they will not be authorized
    owner-bpn-l:
  api:
    # The maximum amount of business partner entries a sharing member can upsert per request
    upsert-limit: 100
  tasks:
    creation:
      fromSharingMember:
        # If true, new business partner input data will be directly ready to be shared
        # If false, new business partner input data need to be manually set to ready
        starts-as-ready: true
        # When and how often the Gate checks for new business partner data to be shared
        cron: '*/30 * * * * *'
        # Up to how many golden record tasks can be created at once when checking
        batchSize: 20
      fromPool:
        # Up to how many golden record tasks can be created at once when checking
        batchSize: 20
        # When and how often the Gate checks for golden record updates from the Pool
        cron: '*/30 * * * * *'
    check:
      # How many golden record tasks should be tried to resolve at once
      batchSize: 20
      # How often golden record tasks should be tried to resolve
      cron: '*/30 * * * * *'
    healthCheck:
      # How many golden record tasks should be checked for being healthy at once
      batchSize: 1000
      # How often the golden record tasks should be checked for being healthy
      cron: '0 0 0 * * *'
    dependencyCheck:
      # How often the golden record connection dependencies should be checked for being healthy
      cron: '*/30 * * * * *'
    consistencyCheck:
      # How many business partners should be checked for consistency at one
      batchSize: 20
      # How often referenced BPNs should be checked for consistency with the golden record pool
      cron: '0 0 0 * * *'

  # Connection to the pool and orchestrator
  client:
    orchestrator:
      # The base-url of the Orchestrator-API
      base-url: http://localhost:8085
      # Whether to enable oauth2 authentication when connecting to the Orchestrator
      security-enabled: true
      provider:
        # Create an oauth2 provider for the orchestrator connection and infer token issuing uri from the security properties
        issuer-uri: ${bpdm.security.auth-server-url:http://localhost:8180}/realms/${bpdm.security.realm:master}
      registration:
        # The orchestrator client should use client credentials mechanism to request a token from the provider
        authorization-grant-type: client_credentials
        # Use a default client id for the client credentials request
        client-id: sa-cl25-cx-3
        # Please provide secret here
        client-secret: "**********"
    pool:
      # The base-url of the Pool-API
      base-url: http://localhost:8080
      # Whether to enable oauth2 authentication when connecting to the Pool
      security-enabled: true
      provider:
        # Create an oauth2 provider for the pool connection and infer token issuing uri from the security properties
        issuer-uri: ${bpdm.security.auth-server-url:http://localhost:8180}/realms/${bpdm.security.realm:master}
      registration:
        # The pool client should use client credentials mechanism to request a token from the provider
        authorization-grant-type: client_credentials
        # Use a default client id for the client credentials request
        client-id: sa-cl7-cx-1
        # No secret on default (please update credentials for production)
        client-secret: "**********"
  security:
    # Allowed origins for CORS
    cors-origins: '*'
    # Whether endpoints should be authenticated/authorized
    enabled: true
    # Base-URL including protocol of the Keycloak server
    auth-server-url: http://localhost:8180
    # URL to the auth endpoint of the Keycloak server
    auth-url: ${bpdm.security.auth-server-url}/realms/${bpdm.security.realm}/protocol/openid-connect/auth
    # This application's resource or client. Used for finding permissions in the given Bearer token
    client-id: Cl16-CX-BPDMGate
    # The keycloak realm to consider
    realm: CX-Central
    # URL to the token refresh endpoint of the Keycloak server
    refresh-url: ${bpdm.security.token-url}
    # URL to the token validation endpoint of the Keycloak server
    token-url: ${bpdm.security.auth-server-url}/realms/${bpdm.security.realm}/protocol/openid-connect/token
    permissions:
      # Name of the permission to read business partner input data
      readInputPartner: read_input_partner
      # Name of the permission to upsert input business partner input data
      writeInputPartner: write_input_partner
      # Name of the permission to read business partner output data
      readOutputPartner: read_output_partner
      # Name of the permission to read changelog entries for business partner input data
      readInputChangelog: read_input_changelog
      # Name of the permission to read changelog entries for business partner output data
      readOutputChangelog: read_output_changelog
      # Name of the permission to read business partner sharing states
      readSharingState: read_sharing_state
      # Name of the permission to change business partner sharing states
      writeSharingState: write_sharing_state
      # Name of the permission to read business partner statistics
      read_stats: read_stats
      # Name of the permission to upload business partner entries for business partner input data
      uploadInputPartner: write_input_partner
      # Name of the permission to read business partner relations
      readInputRelation: read_input_partner
      # Name of the permission to update or create business partner relations
      writeInputRelation: write_input_partner
  datasource:
    # Host name of the used datasource
    host: localhost
    # The database schema to use for this application
    schema: bpdmgate
  origin-id: default-origin
#
# From here on are framework and dependency configuration
# More information about those properties can be taken from the respective documentation of Spring or the dependency
#
server:
  # Change default port to avoid clash with other BPDM applications
  port: 8081
logging:
    pattern:
      # Use BPDM custom log pattern
        console: "%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %green([%-10.10X{user:-System}]) %magenta([%-10.10X{request:-No Request}]) %yellow([%-15.15t]) %cyan(%-40.40logger{39}) : %m%n%wEx"
    level:
      # On default show only logs from INFO and above
        root: INFO
      # Logs from this application's package should be DEBUG and above
        org.eclipse.tractusx.bpdm.gate: DEBUG

management:
    endpoint:
        health:
            show-details: always
            probes:
              # Enable actuator health endpoints for probing
                enabled: true
    health:
        livenessState:
          # Include liveness state in health response (responsive at all)
            enabled: true
        readinessState:
          # Include readiness state in health response (ready to accept traffic)
            enabled: true
spring:
  security:
    oauth2:
      resourceserver:
        # Infer the uris for token validation from the application's security properties
        jwt:
          issuer-uri: ${bpdm.security.auth-server-url}/realms/${bpdm.security.realm}
          jwk-set-uri: ${bpdm.security.auth-server-url}/realms/${bpdm.security.realm}/protocol/openid-connect/certs
  datasource:
      # We use postgres as datasource
        driverClassName: org.postgresql.Driver
      # No password on default (Change for production)
        password: ''
      # Connect to postgres database over jdbc protocol
        url: jdbc:postgresql://${bpdm.datasource.host}:5432/bpdm
      # Default username for BPDM applications
        username: bpdm
  flyway:
    # Activate flyway for automatic database migration
      enabled: true
    # Apply migrations to this application's default schema
      schemas: ${bpdm.datasource.schema}
  jpa:
    # JPA should speak Postgresql
      database-platform: org.hibernate.dialect.PostgreSQLDialect
      properties:
        # We use hibernate as JPA implementation
          hibernate:
            # Hibernate should assume the default schema of this application on default
            default_schema: ${bpdm.datasource.schema}
            # Send updates and inserts out in batches to decrease network connections to the database
            jdbc:
              batch_size: 16
              order_inserts: true
              order_updates: true
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
springdoc:
    # Api document should be in pretty JSON
    writer-with-default-pretty-printer: true
    api-docs:
      # Generate Open-API document
      enabled: true
      # Set custom path for the document
      path: /docs/api-docs
    swagger-ui:
      # Swagger UI should not be available at its default URL (instead on location defined in path)
        disable-swagger-default-url: true
      # Override default Swagger UI location
        path: /ui/swagger-ui
      # Show validation specific information for properties (pattern, minimum, maximum, etc...)
        show-common-extensions: true






